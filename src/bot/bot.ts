import { config } from "dotenv";
import TelegramBot from "node-telegram-bot-api";
import { UserService } from "../users/user.service";
import { Accommodation } from "../accommodation/accommodation.entity";
import { AccommodationService } from "../accommodation/accommodation.service";
import { ActivityType, User } from "../users/user.entity";


export const monitoredIds: Set<TelegramBot.ChatId> = new Set();

export const bootstrapBot = async (userService: UserService, accommodationService: AccommodationService) => {
    config({
        path: '.env'
    })

    const BOT_TOKEN = process.env.BOT_TOKEN

    const bot = new TelegramBot(BOT_TOKEN!, { polling: true });

    const commands: TelegramBot.BotCommand[] = [
        {
            command: 'monitor',
            description: '–ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–µ–∂–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä.'
        },
        {
            command: 'unmonitor',
            description: '–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–µ–∂–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä.'
        }
    ]

    bot.setMyCommands(commands);

    bot.onText(/\/monitor/, async (msg) => {
        const chatId = msg.chat.id;
        const foundedUser = await userService.findById(chatId);
        if (!foundedUser) {
            await bot.sendMessage(chatId, '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—ã - –∞–Ω–æ–º–∞–ª–∏—è. ü§ñ \n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ /start');
            return;
        }
        if (foundedUser.type === ActivityType.MONITOR) {
            await bot.sendMessage(chatId, '–í—ã —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã.');
            return;
        }
        foundedUser.type = ActivityType.MONITOR;
        userService.update(foundedUser);
        const responseMessage = '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–≤–µ–∂–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä.\n–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤—ã —Å—Ä–∞–∑—É –∂–µ –±—É–¥–µ—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω—ã! ü§ì';
        await bot.sendMessage(msg.chat.id, responseMessage);
    })

    bot.on('left_chat_member', async (msg) => {
        const chatId = msg.chat.id;
        const foundedUser = await userService.findById(chatId);
        if (!foundedUser) {
            await bot.sendMessage(chatId, '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—ã - –∞–Ω–æ–º–∞–ª–∏—è. ü§ñ \n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ /start');
            return;
        }
        foundedUser.type = ActivityType.UNMONITOR;
        await userService.update(foundedUser);
    })

    bot.onText(/\/unmonitor/, async (msg) => {
        const chatId = msg.chat.id;
        const foundedUser = await userService.findById(chatId);
        if (!foundedUser) {
            await bot.sendMessage(chatId, '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—ã - –∞–Ω–æ–º–∞–ª–∏—è. ü§ñ \n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ /start');
            return;
        }
        if (foundedUser.type === ActivityType.UNMONITOR) {
            await bot.sendMessage(chatId, '–í—ã –∏ —Ç–∞–∫ –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ö—É–¥–∞ –≤–∞–º –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è? üëÄ');
            return;
        }
        foundedUser.type = ActivityType.UNMONITOR;
        await userService.update(foundedUser);
        await bot.sendMessage(chatId,'–í—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã. üò•')
    })

    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;
        const foundedUser = await userService.findById(chatId);
        console.table({
            foundedUser,
            message:`Founded user with ${chatId} id`
        })
        if (!foundedUser) {
            const defaultUser: User = new User();
            defaultUser.chatId = chatId;
            defaultUser.type = ActivityType.NEW;
            userService.insert(defaultUser);
            const message = '–î–æ–±—Ä–∞ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ —Å–¥–∞—á–µ –æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –í–∏—Ç–µ–±—Å–∫–µ.'
            await bot.sendMessage(chatId, message);
        } else {
            const message = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ!'
            await bot.sendMessage(chatId, message);
        }
    })
    return bot;
}